package wordle.project.base;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import javax.swing.*;
import javax.swing.border.Border;

public class WordleGame implements ActionListener {


	private static int auto_mode;
	private String color_string;
	private static WordleGame w;
	public static int end = 0;

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
	}

	//----------------- UI windows , elements
	class WordPanel extends JPanel {

		JLabel[] wordColumns = new JLabel[5];

		public WordPanel()// panel having a 5 letter word will be filled here
		{
			this.setLayout(new GridLayout(1, 5));
			Border blackBorder = BorderFactory.createLineBorder(Color.LIGHT_GRAY);

			for (int i = 0; i < 5; i++) {
				wordColumns[i] = new JLabel();
				wordColumns[i].setHorizontalAlignment(JLabel.CENTER);
				wordColumns[i].setOpaque(true);
				wordColumns[i].setBorder(blackBorder);
				this.add(wordColumns[i]);
			}
		}


		public void clearWordPanel() {
			for (int i = 0; i < 5; i++) {
				wordColumns[i].setText("");
			}
		}

		public void setPanelText(String charValue, int position, Color color) {
			this.wordColumns[position].setText(charValue);
			this.wordColumns[position].setBackground(color);
		}
	}

	class UserPanel extends JPanel {

		private JTextField userInput;
		private JButton okButton;
		private JRadioButton btn_auto;
		private JRadioButton btn_manual;
		private ButtonGroup mode = new ButtonGroup();


		public UserPanel() {
			this.setLayout(new GridLayout(2, 2));
			btn_auto = new JRadioButton();
			this.add(btn_auto);
			btn_manual = new JRadioButton();
			this.add(btn_manual);
			this.mode.add(btn_auto);
			this.mode.add(btn_manual);

			userInput = new JTextField();
			this.add(userInput);
			okButton = new JButton("OK");
			this.add(okButton);

		}

		public JTextField getUserInput() {
			return userInput;
		}

		public JButton getOkButton() {
			return okButton;
		}

		public JRadioButton getBtnAuto() {
			return btn_auto;
		}

		public JRadioButton getBtnManual() {
			return btn_manual;
		}
	}

	//------------------------------


	//----------------- code execution

	private JFrame gameFrame;
	private WordPanel[] wordPanelArray = new WordPanel[6];
	private UserPanel userPanel;
	private String wordleString;
	private int chance_number = 0; //
	List<String> wordList;

	public WordleGame() {
		String color_string = "";
		gameFrame = new JFrame("Wordle Game");
		gameFrame.setSize(500, 500);
		gameFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		gameFrame.setLayout(new GridLayout(8, 1));
		gameFrame.setVisible(true);
		gameFrame.setLocationRelativeTo(null);

		userPanel = new UserPanel();
		userPanel.getOkButton().addActionListener(this);
		userPanel.getBtnAuto().addActionListener(this);
		userPanel.getBtnManual().addActionListener(this);
		gameFrame.add(userPanel);

		for (int i = 0; i < 6; i++) {
			wordPanelArray[i] = new WordPanel();
			gameFrame.add(wordPanelArray[i]);
		}

		gameFrame.revalidate();
		gameFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		wordleString = getWordleString();//the word of the day

		System.out.println("Word for the day : " + wordleString);
	}

	public static void main(String[] args) {
		w = new WordleGame();
		while (true) {
			try {
				TimeUnit.MILLISECONDS.sleep(10);
			} catch (Exception f) {
			}
			; // check delay 10ms

			if (w.auto_mode == 1) {
				w.auto_mode_sequence();
//				w.auto_mode = 0;
			}

			if (end == 1) System.exit(0);// end program

		}
		// testing the check word function


	}

	//------------------------------


	//--- get a random word from the list during the start of the game
	public String getWordleString() {
		Path path = Paths.get("..\\\\wordle.project\\\\assets\\\\Words.txt");
		wordList = new ArrayList<>();
		try {
			wordList = Files.readAllLines(path);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Random random = new Random();
		int position = random.nextInt(wordList.size());
//		return wordList.get(position).trim().toUpperCase();
		return "SPEED";
	}

	//--- check the word for the answer bot and then return the color result
	public String check_word(String userWord) {
		this.color_string = "";
		if (userWord.length() == 5 && wordList.contains(userWord)) {
			if (isWordleWordEqualTo(userWord.trim().toUpperCase())) {
				JOptionPane.showMessageDialog(null, "You Win!!!", "Congrats", JOptionPane.INFORMATION_MESSAGE);
				clearAllPanels();
				System.out.println("\nWon in " + (chance_number + 1) + " chances !");
				gameFrame.dispose();
				this.end = 1;
			}
			chance_number++;
		} else {
			System.out.println("!! Incorrect length of the word, must be 5 or incorrect word entered");
		}

		if (chance_number > 5) {
			JOptionPane.showMessageDialog(null, "You Lost.Better luck next time.", "Oops",
					JOptionPane.INFORMATION_MESSAGE);
			gameFrame.dispose();
			this.end = 1;
		}
		return this.color_string;

	}

	//--- action performed when the ok button is clicked
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(userPanel.okButton)) {
			String userWord = this.userPanel.getUserInput().getText();
			System.out.println(check_word(userWord));
//			if (userWord.length() > 4 && wordList.contains(userWord)) {
//				if (isWordleWordEqualTo(userWord.trim().toUpperCase())) {
//					JOptionPane.showMessageDialog(null, "You Win!!!", "Congrats", JOptionPane.INFORMATION_MESSAGE);
//					clearAllPanels();
//					System.out.println("\nWon in " + (chance_number + 1) + " chances !");
//					gameFrame.dispose();
//					return;
//				}
//
//				chance_number++;
//				this.color_string = "";
//			} else {
//				System.out.println("!! Incorrect length of the word, must be 5 or incorrect word entered");
//			}
//
//			if (chance_number > 5) {
//				JOptionPane.showMessageDialog(null, "You Lost.Better luck next time.", "Oops",
//						JOptionPane.INFORMATION_MESSAGE);
//				gameFrame.dispose();
//				return;
//			}
		} else if (e.getSource().equals(userPanel.btn_auto)) {
			System.out.println("btn_auto pressed");
			auto_mode = 1;

		} else if (e.getSource().equals(userPanel.btn_manual)) {
			System.out.println("btn_manual pressed: MANUAL mode active");
			auto_mode = 0;
		}

	}

	private void auto_mode_sequence() {
		try {
			Random random = new Random();
			System.out.println(w.check_word(wordList.get(random.nextInt(wordList.size()))));
			TimeUnit.MILLISECONDS.sleep(500);
//			System.out.println(w.check_word("ghost"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("guest"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("world"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("small"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("mails"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("calls"));
//			TimeUnit.MILLISECONDS.sleep(1000);
//			System.out.println(w.check_word("stall"));
		} catch (Exception ee) {
			System.out.println("Exception in auto");
		}

	}

	public int count_check(String s, String c) {
		int count = 0;
		String[] s_arr = s.split("");
		for (int i = 0; i < s.length(); i++) {
			if (c.equals(s_arr[i])) {
				count++;
			}
		}
		return count;
	}

	//--- take the word input and change the color of the boxes according to the word input
	private boolean isWordleWordEqualTo(String userWord) {
		List<String> wordleWordsList = Arrays.asList(wordleString.split(""));
		String[] userWordsArray = userWord.split("");
		List<Boolean> wordMatchesList = new ArrayList<>();
		System.out.println("Chance " + (chance_number + 1) + " = " + userWord);
		String checked_chars = "";// letters checked until that instant

		for (int i = 0; i < 5; i++) // checking for each letter in the word inputted and then updating the color of the panel text for each letter
		{
			checked_chars = checked_chars + userWordsArray[i];
//			System.out.println("count of " + userWordsArray[i] + " is " + count_check(userWord, userWordsArray[i]) );
				if (wordleWordsList.contains(userWordsArray[i]) && wordleWordsList.get(i).equals(userWordsArray[i])) {
					getActivePanel().setPanelText(userWordsArray[i], i, Color.GREEN);
					wordMatchesList.add(true);
					this.color_string = this.color_string + "G";
				} else if (wordleWordsList.contains(userWordsArray[i]) && count_check(wordleString, userWordsArray[i]) >= count_check(checked_chars, userWordsArray[i])) {

					getActivePanel().setPanelText(userWordsArray[i], i, Color.YELLOW);
					wordMatchesList.add(false);
					this.color_string = this.color_string + "Y";

				}
				else {
					getActivePanel().setPanelText(userWordsArray[i], i, Color.GRAY);
					wordMatchesList.add(false);
					this.color_string = this.color_string + "-";
				}
		}
		this.gameFrame.revalidate();
		return !wordMatchesList.contains(false);
	}
	// MITAL's function
//	private boolean isWordleWordEqualTo(String userWord) {
//		List<String> wordleWordsList = Arrays.asList(wordleString.split(""));
//		String[] userWordsArray = userWord.split("");
//		List<Boolean> wordMatchesList = new ArrayList<>();
//		System.out.println("Chance " + (chance_number + 1) + " = " + userWord);
//		String enteredWord = "";
//		for (int i = 0; i < 5; i++) // checking for each letter in the word inputted and then updating the color of the panel text
//		{
//			if (wordleWordsList.contains(userWordsArray[i])) {
//				if (wordleWordsList.get(i).equals(userWordsArray[i])) {
//					System.out.println(getActivePanel() + "GetActivePanel");
//					getActivePanel().setPanelText(userWordsArray[i], i, Color.GREEN);
//					wordMatchesList.add(true);
//					this.color_string = this.color_string + "G";
//				}
//				else
//				{
//					// No of Occurences
//					int letterCount = 0;
//					if (enteredWord.contains(userWordsArray[i]))
//					{
//						for (int j = 0; j < 5; j++)
//						{
//							if (wordleWordsList.get(j).contains(userWordsArray[i])) {
//								letterCount = letterCount + 1;
//							}
//						}
//
//						if (letterCount > 1)
//						{
//							getActivePanel().setPanelText(userWordsArray[i], i, Color.YELLOW);
//							wordMatchesList.add(false);
//							this.color_string = this.color_string + "Y";
//						} else
//						{
//							getActivePanel().setPanelText(userWordsArray[i], i, Color.GRAY);
//							wordMatchesList.add(false);
//							this.color_string = this.color_string + "-";
//						}
//					} else {
//						getActivePanel().setPanelText(userWordsArray[i], i, Color.YELLOW);
//						wordMatchesList.add(false);
//						this.color_string = this.color_string + "Y";
//					}
//				}
//			}
//
//			else {
//				getActivePanel().setPanelText(userWordsArray[i], i, Color.GRAY);
//				wordMatchesList.add(false);
//				this.color_string = this.color_string + "-";
//			}
//			enteredWord = enteredWord + userWordsArray[i];
//		}
//		return !wordMatchesList.contains(false);
//	}

	public WordPanel getActivePanel() {
		return this.wordPanelArray[chance_number];
	}

	private void clearAllPanels() {
		for (int i = 0; i <= chance_number; i++) {
			wordPanelArray[i].clearWordPanel();
		}
	}

}




// link to make-it-work : https://stackoverflow.com/questions/59601077/intellij-errorjava-error-release-version-5-not-supported